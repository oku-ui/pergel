import { join, resolve } from 'node:path'
import type { Nuxt } from '@nuxt/schema'
import { type Resolver, addTemplate } from '@nuxt/kit'
import defu from 'defu'
import type { PergelOptions, ResolvedPergelOptions } from './types'
import { rootFolderSync } from './utils/rootFolderSync'

export async function setupPergel(
  data:
  {
    options: PergelOptions
    nuxt: Nuxt
    resolver: Resolver
    version: string
  },
) {
  const { options, nuxt, resolver, version } = data

  const pergelDir = join(options.pergelDir ?? 'pergel')
  const templateDir = join(options.templateDir ?? 'pergel', 'templates')
  const readmePath = join('README.yaml')

  const resolveDir = resolve(nuxt.options.rootDir)
  const resolvePergelDir = resolve(join(nuxt.options.rootDir, pergelDir))
  const resolveTemplateDir = resolve(join(nuxt.options.rootDir, templateDir))
  const resolveReadmePath = resolve(join(nuxt.options.rootDir, pergelDir, readmePath))

  const { projectNames } = rootFolderSync(resolvePergelDir, resolveTemplateDir, options)

  const pergelType = addTemplate({
    filename: 'pergel/types.ts',
    write: true,
    getContents: () => {
      return /* TypeScript */ `
          export type ProjectName = ${projectNames.map((projectName) => {
        return `'${projectName}'`
      }).join(' | ')}
          export type Module = ${nuxt._pergel.modules.map((module) => { return `'${module}'` }).join(' | ')}

          export type PergelGlobalContextOmitModule = Omit<PergelGlobalContext, 'moduleName'>

          export interface PergelGlobalContext {
            projectName: ProjectName
            moduleName: Module
          }
        `.trim().replace(/ {10}/g, '')
    },
  })

  nuxt.options.alias['#pergel/types'] = pergelType.dst
  nuxt.options.nitro.alias ??= {}
  nuxt.options.nitro.alias['#pergel/types'] = pergelType.dst

  nuxt.hooks.hook('prepare:types', ({ references, tsConfig }) => {
    references.push({
      path: pergelType.dst,
    })

    tsConfig.include ??= []
    tsConfig.include.push('./pergel/**/*')
  })

  nuxt.hooks.hook('nitro:init', ({ options }) => {
    options.typescript.tsConfig ??= {}
    options.typescript.tsConfig.include ??= []
    options.typescript.tsConfig.include.push('./pergel/**/*')
    options.typescript.tsConfig.include.push(resolve(join(nuxt.options.rootDir, 'pergel', '/**/*')))
  })

  // const resolvedOptions = defu(options, {
  //   projects: {
  //   },
  //   esnext: true,
  //   pergelDir,
  //   rootDir,
  // } as PergelOptions)

  const resolvedPergelOptions = defu(options, {
    rootOptions: options,
    // Pergel Modules
    modules: [
      'S3',
      'ses',
      'nodeCron',
      'bullmq',
      'json2csv',
      'graphqlYoga',
      'drizzle',
      'lucia',
      'ui',
    ],
    projectNames,
    nitroImports: {},
    nuxtImports: {},
    readmeYaml: {
      pergel: {
        'comment-block-1': 'This file is generated by pergel. Do not edit it manually.',
        'comment-block-2': `Version: ${version}`,
      },
    },
    resolver,
    devServerHandler: [],
    dts: {},
    projects: {},
    dir: {
      pergel: pergelDir ?? 'pergel',
      readme: join(pergelDir, 'README.yaml'),
    },
    contents: [],
    pergelDir: resolve(resolveDir, pergelDir ?? 'pergel'),
    templateDir: resolveTemplateDir,
    rootDir: resolveDir,
    readmeDir: resolve(resolveReadmePath),
    esnext: true,
    debug: false,
  } satisfies ResolvedPergelOptions)
  nuxt._pergel = resolvedPergelOptions as any
}
